diff --git a/classes/phing/Phing.php b/classes/phing/Phing.php
index b45ba64..dca21d1 100644
--- a/classes/phing/Phing.php
+++ b/classes/phing/Phing.php
@@ -17,11 +17,15 @@
  * <http://phing.info>.
  */
 
+use Symfony\Component\Console\Input\StringInput;
+use Symfony\Component\Console\Output\ConsoleOutput;
+
 require_once 'phing/Diagnostics.php';
 require_once 'phing/Project.php';
 require_once 'phing/ProjectComponent.php';
 require_once 'phing/Target.php';
 require_once 'phing/Task.php';
+require_once 'phing/input/ConsoleInputHandler.php';
 
 include_once 'phing/BuildException.php';
 include_once 'phing/ConfigurationException.php';
@@ -819,7 +823,7 @@ class Phing
     private function addInputHandler(Project $project)
     {
         if ($this->inputHandlerClassname === null) {
-            $handler = new DefaultInputHandler();
+            $handler = new ConsoleInputHandler(STDIN, new ConsoleOutput());
         } else {
             try {
                 $clz = Phing::import($this->inputHandlerClassname);
diff --git a/classes/phing/Project.php b/classes/phing/Project.php
index b107439..a802b3b 100644
--- a/classes/phing/Project.php
+++ b/classes/phing/Project.php
@@ -17,10 +17,12 @@
  * <http://phing.info>.
  */
 
+use Symfony\Component\Console\Output\ConsoleOutput;
+use Symfony\Component\Console\Output\ConsoleInput;
+
 include_once 'phing/system/io/PhingFile.php';
 include_once 'phing/util/FileUtils.php';
 include_once 'phing/TaskAdapter.php';
-include_once 'phing/util/StringHelper.php';
 include_once 'phing/BuildEvent.php';
 include_once 'phing/input/DefaultInputHandler.php';
 include_once 'phing/types/PropertyValue.php';
@@ -118,14 +120,13 @@ class Project
     public function __construct()
     {
         $this->fileUtils = new FileUtils();
-        $this->inputHandler = new DefaultInputHandler();
     }
 
     /**
      * Sets the input handler
      * @param InputHandler $handler
      */
-    public function setInputHandler(InputHandler $handler)
+    public function setInputHandler($handler)
     {
         $this->inputHandler = $handler;
     }
diff --git a/classes/phing/input/ConsoleInputHandler.php b/classes/phing/input/ConsoleInputHandler.php
new file mode 100644
index 0000000..0419d6c
--- /dev/null
+++ b/classes/phing/input/ConsoleInputHandler.php
@@ -0,0 +1,104 @@
+<?php
+
+use Symfony\Component\Console\Helper\QuestionHelper;
+use Symfony\Component\Console\Input\StringInput;
+use Symfony\Component\Console\Output\OutputInterface;
+use Symfony\Component\Console\Question\ChoiceQuestion;
+use Symfony\Component\Console\Question\ConfirmationQuestion;
+use Symfony\Component\Console\Question\Question;
+
+/**
+ * Uses Symfony Console to present questions
+ *
+ * @author Michiel Rook <mrook@php.net>
+ * @package phing.input
+ */
+class ConsoleInputHandler implements InputHandler
+{
+    /**
+     * @var resource
+     */
+    private $inputStream;
+
+    /**
+     * @var OutputInterface
+     */
+    private $output;
+
+    /**
+     * ConsoleInputHandler constructor.
+     * @param resource $inputStream
+     * @param OutputInterface $output
+     */
+    public function __construct($inputStream, OutputInterface $output)
+    {
+        $this->inputStream = $inputStream;
+        $this->output = $output;
+    }
+
+    /**
+     * Handle the request encapsulated in the argument.
+     *
+     * <p>Precondition: the request.getPrompt will return a non-null
+     * value.</p>
+     *
+     * <p>Postcondition: request.getInput will return a non-null
+     * value, request.isInputValid will return true.</p>
+     * @param InputRequest $request
+     * @return void
+     */
+    public function handleInput(InputRequest $request)
+    {
+        $questionHelper = new QuestionHelper();
+        $questionHelper->setInputStream($this->inputStream);
+        
+        $question =  $this->getQuestion($request);
+        
+        if ($request->isHidden()) {
+            $question->setHidden(true);
+        }
+        
+        $result = $questionHelper->ask(new StringInput(''), $this->output, $question);
+        
+        $request->setInput($result);
+    }
+
+    /**
+     * @param InputRequest $inputRequest
+     * @return Question
+     */
+    protected function getQuestion(InputRequest $inputRequest)
+    {
+        $prompt = $this->getPrompt($inputRequest);
+
+        if ($inputRequest instanceof YesNoInputRequest) {
+            return new ConfirmationQuestion($prompt);
+        } else if ($inputRequest instanceof MultipleChoiceInputRequest) {
+            return new ChoiceQuestion($prompt, $inputRequest->getChoices(), $inputRequest->getDefaultValue());
+        } else  {
+            return new Question($prompt, $inputRequest->getDefaultValue());
+        }
+    }
+
+    /**
+     * @param InputRequest $inputRequest
+     * @return string
+     */
+    protected function getPrompt(InputRequest $inputRequest)
+    {
+        $prompt = $inputRequest->getPrompt();
+        $defaultValue = $inputRequest->getDefaultValue();
+
+        if ($defaultValue !== null) {
+            if ($inputRequest instanceof YesNoInputRequest) {
+                $defaultValue = $inputRequest->getChoices()[$defaultValue];
+            }
+            
+            $prompt .= ' [' . $defaultValue . ']';
+        }
+        
+        $pchar = $inputRequest->getPromptChar();
+
+        return $prompt . ($pchar ? $pchar . ' ' : ' ');
+    }
+}
diff --git a/classes/phing/input/InputRequest.php b/classes/phing/input/InputRequest.php
index ff401fe..bd89d72 100644
--- a/classes/phing/input/InputRequest.php
+++ b/classes/phing/input/InputRequest.php
@@ -35,6 +35,7 @@ class InputRequest
     protected $input;
     protected $defaultValue;
     protected $promptChar;
+    protected $hidden = false;
 
     /**
      * @param string $prompt The prompt to show to the user.  Must not be null.
@@ -116,4 +117,20 @@ class InputRequest
     {
         return $this->promptChar;
     }
+
+    /**
+     * @return bool
+     */
+    public function isHidden()
+    {
+        return $this->hidden;
+    }
+
+    /**
+     * @param bool $hidden
+     */
+    public function setHidden($hidden)
+    {
+        $this->hidden = $hidden;
+    }
 }
diff --git a/classes/phing/tasks/system/InputTask.php b/classes/phing/tasks/system/InputTask.php
index 6bf80f7..e66d789 100644
--- a/classes/phing/tasks/system/InputTask.php
+++ b/classes/phing/tasks/system/InputTask.php
@@ -42,6 +42,7 @@ class InputTask extends Task
     private $propertyName; // required
     private $defaultValue;
     private $promptChar;
+    private $hidden = false;
 
     /**
      * Defines valid input parameters as comma separated strings. If set, input
@@ -104,6 +105,14 @@ class InputTask extends Task
     }
 
     /**
+     * @param bool $hidden
+     */
+    public function setHidden($hidden)
+    {
+        $this->hidden = $hidden;
+    }
+
+    /**
      * Actual method executed by phing.
      * @throws BuildException
      */
@@ -146,6 +155,8 @@ class InputTask extends Task
 
         $request->setPromptChar($this->promptChar);
 
+        $request->setHidden($this->hidden);
+
         // unless overridden...
         if ($this->defaultValue !== null) {
             $request->setDefaultValue($this->defaultValue);
